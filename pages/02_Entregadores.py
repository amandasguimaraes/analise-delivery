import streamlit as st
import pandas as pd
from src.utils import setup_sidebar
from src.data_processing import run_etl
from src.visualizations import (
    get_delivery_key_metrics, 
    get_delivery_rating_by_traffic, 
    get_delivery_rating_by_weather, 
    get_top_n_deliverers, 
    plot_delivery_age_distribution, 
    plot_delivery_ratings_distribution, 
    plot_time_taken_by_vehicle_condition, 
    plot_deliveries_by_age_group_and_city 
)

st.set_page_config(page_title='Vis√£o de Entregadores', page_icon='üöö', layout='wide')

# --- Fluxo de Processamento de Dados ---
# Garante que o DataFrame seja carregado e processado apenas uma vez
if 'df_processed' not in st.session_state:
    df_clean = run_etl(
        input_path='data/raw/curry_company_dataset.csv',
        output_path='data/processed/curry_company_processed.csv'
    )
    if df_clean is None:
        #st.error("Erro ao carregar ou processar os dados. Por favor, verifique os arquivos e caminhos.")
        st.stop()
    st.session_state['df_processed'] = df_clean

df = st.session_state['df_processed']

# --- Configura√ß√£o Barra Lateral e Aplica√ß√£o Filtros ---
df_filtered = setup_sidebar(df)

# --- Layout do Dashboard Streamlit ---
metrics = get_delivery_key_metrics(df_filtered)

# Exibe as m√©tricas
col1, col2, col3, col4, col5 = st.columns(5)

with col1:
    st.metric('Idade M√°xima', metrics['Idade M√°xima'])
with col2:
    st.metric('Idade M√≠nima', metrics['Idade M√≠nima'])
with col3:
    st.metric('Melhor Condi√ß√£o Ve√≠culo', metrics['Melhor Condi√ß√£o Ve√≠culo'])
with col4:
    st.metric('Pior Condi√ß√£o Ve√≠culo', metrics['Pior Condi√ß√£o Ve√≠culo'])
with col5:
    st.metric('M√©dia Avalia√ß√£o', metrics['M√©dia Avalia√ß√£o Entregadores'])

st.markdown("---") 

# --- Se√ß√£o de An√°lises Detalhadas ---
tab1, tab2, tab3, tab4 = st.tabs([
    "Avalia√ß√µes por Condi√ß√£o",
    "Top/Piores Entregadores",
    "Distribui√ß√µes Demogr√°ficas e de Avalia√ß√£o",
    "Impacto da Frota e Demografia"
])

with tab1:
    st.subheader("Avalia√ß√£o M√©dia por Densidade de Tr√°fego")
    df_rating_traffic = get_delivery_rating_by_traffic(df_filtered)
    st.dataframe(df_rating_traffic, use_container_width=True)

    st.subheader("Avalia√ß√£o M√©dia por Condi√ß√£o Clim√°tica")
    df_rating_weather = get_delivery_rating_by_weather(df_filtered)
    st.dataframe(df_rating_weather, use_container_width=True)

with tab2:
    st.subheader("Top 10 Entregadores Mais R√°pidos por Cidade")
    df_top_10_fastest = get_top_n_deliverers(df_filtered, top_n=10, ascending=True)
    st.dataframe(df_top_10_fastest, use_container_width=True)

    st.subheader("Top 10 Entregadores Mais Lentos por Cidade")
    df_top_10_slowest = get_top_n_deliverers(df_filtered, top_n=10, ascending=False)
    st.dataframe(df_top_10_slowest, use_container_width=True)

with tab3:
    st.subheader("Distribui√ß√£o da Idade dos Entregadores")
    fig_age_dist = plot_delivery_age_distribution(df_filtered)
    st.plotly_chart(fig_age_dist, use_container_width=True)

    st.subheader("Distribui√ß√£o das Avalia√ß√µes dos Entregadores")
    fig_ratings_dist = plot_delivery_ratings_distribution(df_filtered)
    st.plotly_chart(fig_ratings_dist, use_container_width=True)

with tab4:
    st.subheader("Tempo M√©dio de Entrega por Condi√ß√£o do Ve√≠culo")
    fig_time_vehicle = plot_time_taken_by_vehicle_condition(df_filtered)
    st.plotly_chart(fig_time_vehicle, use_container_width=True)

    st.subheader("N√∫mero de Entregadores √önicos por Faixa Et√°ria e Cidade")
    fig_age_group_city = plot_deliveries_by_age_group_and_city(df_filtered)
    st.plotly_chart(fig_age_group_city, use_container_width=True)
